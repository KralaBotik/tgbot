require("dotenv").config();
const { Bot, Keyboard, InlineKeyboard, session } = require("grammy");
const axios = require("axios");
const { addUser, isAuthorized, getUserInfo, saveAppointment, deleteAppointmentsForToday } = require("./database");


const bot = new Bot(process.env.BOT_API_KEY);

bot.use(session({
  initial: () => ({
    appointment: {}
  })
}));

const mainMenu = new Keyboard()
  .text("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π–∫—É")
  .text("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
  .resized();

const authKeyboard = new Keyboard()
  .requestContact("üì± –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è")
  .resized()
  .oneTime();

  const cabinetMenu = new Keyboard()
  .text("üìú –ê—Ä—Ö–∏–≤ –º–æ–µ–∫")
  .text("üìã –ú–æ–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–ø–∏—Å–∏")
  .row()
  .text("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
  .row()
  .text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é")
  .resized();


const API_URL = "https://molot.papillon.ru/rty/wht/reserv/";

function formatDate(dateString) {
  const [year, month, day] = dateString.split('-');
  return `${day}.${month}.${year}`;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function cancelReservation(date, time, duration, userId, boxId = 1) {
  const url = `${API_URL}set.php?box=${boxId}`;

  const data = {
    id: null,
    date: date, // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
    time: {
      start: time, // –§–æ—Ä–º–∞—Ç HH:MM
      duration: duration
    },
    free: true,
    service: false,
    person: {
      id: userId // ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    }
  };

  try {
    const response = await axios.post(url, data, {
      headers: { 'Content-Type': 'application/json' }
    });
    console.log("–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ:", response.data);
    return response.data;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", error.response?.data || error.message);
    throw error;
  }
}

async function getAppointmentsFromAPI(userId) {
  try {
    const today = new Date().toISOString().split('T')[0]; // –§–æ—Ä–º–∞—Ç YYYY-MM-DD
    const response = await axios.get(`${API_URL}get.php`, {
      params: {
        user_id: userId,
        dates: `[${today}]` // –ü–µ—Ä–µ–¥–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
      }
    });
    console.log("–û—Ç–≤–µ—Ç –æ—Ç API:", JSON.stringify(response.data, null, 2)); // –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –∏–∑ –æ—Ç–≤–µ—Ç–∞
    if (Array.isArray(response.data)) {
      const appointments = response.data.flatMap(box => box.intervals);
      return appointments;
    } else {
      console.error("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö –æ—Ç API:", response.data);
      return [];
    }
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π —Å API:", error);
    return [];
  }
}

bot.hears("üìú –ê—Ä—Ö–∏–≤ –º–æ–µ–∫", async (ctx) => {
  const today = new Date().toISOString().split('T')[0];
  const appointments = await getAppointmentsFromAPI(ctx.from.id);

  if (appointments.length === 0) {
    return ctx.reply("‚ùå –ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç.", { reply_markup: cabinetMenu });
  }

  for (const { id, date, time } of appointments) {
    const formattedDate = formatDate(date);
    const keyboard = new InlineKeyboard().text("üóë –£–¥–∞–ª–∏—Ç—å", `delete_${id}`);
    await ctx.reply(
      `üìÖ –î–∞—Ç–∞: ${formattedDate}\n‚è∞ –í—Ä–µ–º—è: ${time.start}\n‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${time.duration} –º–∏–Ω—É—Ç`,
      { reply_markup: keyboard }
    );
  }
});

bot.callbackQuery(/delete_(\d+)/, async (ctx) => {
  const appointmentId = ctx.match[1];
  const userId = ctx.from.id;

  try {
    const appointments = await getAppointmentsFromAPI(userId);

    if (!Array.isArray(appointments)) {
      console.error("–û–∂–∏–¥–∞–ª—Å—è –º–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π, –ø–æ–ª—É—á–µ–Ω–æ:", appointments);
      await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π.");
      return;
    }

    const appointment = appointments.find(app => app.id === appointmentId);

    if (!appointment) {
      await ctx.answerCallbackQuery("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.");
      return;
    }

    const formattedDate = formatDate(appointment.date);

    await cancelReservation(appointment.date, appointment.time.start, appointment.time.duration, userId);

    await ctx.answerCallbackQuery("‚úÖ –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞.");
    await ctx.editMessageText(
      `üöó –ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞:\n\n` +
      `üìÖ –î–∞—Ç–∞: ${formattedDate}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${appointment.time.start}\n` +
      `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${appointment.time.duration} –º–∏–Ω—É—Ç`
    );
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏.");
  }
});

async function fetchSchedule(date, box = 1) {
  try {
    const response = await axios.get(API_URL + 'get.php', { params: { dates: `[${date}]`, box } });
    return response.data[0]?.intervals || [];
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è:", error);
    return [];
  }
}

async function setReservation(data, box = 1) {
  console.log('–∑–∞–ø—É—â–µ–Ω–æ!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!', data)
  try {
    const response = await axios({
      method: 'post',
      url: API_URL + 'set.php?box=' + box,
      headers: {
      'Content-Type': 'application/json'
        },
      data: data
    });
    
    console.log(response.data);
    return response;
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
    return [];
  }
}


async function createTimeButtons(date, box) {
  const intervals = await fetchSchedule(date, box);
  const keyboard = new InlineKeyboard();

  const busySlots = new Set();

  intervals.forEach(({ time }) => {
    if (time?.start && time?.duration) {
      const [startHour, startMinute] = time.start.split(":").map(Number);
      const duration = parseInt(time.duration, 10);
      const startTotal = startHour * 60 + startMinute;
      const endTotal = startTotal + duration;

      for (let minutes = startTotal; minutes < endTotal; minutes += 15) {
        const slotStart = Math.floor(minutes / 60) * 60 + (Math.floor(minutes % 60 / 15) * 15);
        const hours = Math.floor(slotStart / 60);
        const mins = slotStart % 60;
        const slot = `${String(hours).padStart(2, '0')}:${String(mins).padStart(2, '0')}`;
        busySlots.add(slot);
      }
    }
  });

  for (let hour = 0; hour < 24; hour++) {
    for (let minute = 0; minute < 60; minute += 15) {
      const time = `${String(hour).padStart(2, '0')}:${String(minute).padStart(2, '0')}`;
      if (busySlots.has(time)) {
        keyboard.text(`‚õîÔ∏è ${time}`, `busy_${time}`);
      } else {
        keyboard.text(`‚úÖ ${time}`, `time_${date}_${time}`);
      }
    }
    keyboard.row();
  }

  keyboard.row().text("üîô –ù–∞–∑–∞–¥", "back_to_dates");
  return keyboard;
}

async function createDateButtons() {
  const today = new Date();
  const keyboard = new InlineKeyboard();

  keyboard.text("–°–µ–≥–æ–¥–Ω—è", `date_${today.toISOString().split('T')[0]}`);
  keyboard.text("–ó–∞–≤—Ç—Ä–∞", `date_${new Date(today.setDate(today.getDate() + 1)).toISOString().split('T')[0]}`);
  keyboard.row();

  keyboard.text("01.04.2024", "date_2024-04-01");
  keyboard.row();

  keyboard.text("üìÖ –ö–∞–ª–µ–Ω–¥–∞—Ä—å", "open_calendar");
  keyboard.row();

  keyboard.text("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", "back_to_main_menu");

  return keyboard;
}

async function createCalendarButtons() {
  const today = new Date();
  const keyboard = new InlineKeyboard();

  for (let i = 0; i < 30; i++) {
    const date = new Date(today);
    date.setDate(today.getDate() + i);
    keyboard.text(date.toLocaleDateString('ru-RU'), `date_${date.toISOString().split('T')[0]}`);
    if ((i + 1) % 5 === 0) keyboard.row();
  }

  keyboard.row().text("üîô –ù–∞–∑–∞–¥", "back_to_dates");

  return keyboard;
}

async function createDurationButtons() {
  return new InlineKeyboard()
    .text("15 –º–∏–Ω", "duration_15")
    .text("30 –º–∏–Ω", "duration_30")
    .text("45 –º–∏–Ω", "duration_45")
    .text("60 –º–∏–Ω", "duration_60")
    .row()
    .text("üîô –ù–∞–∑–∞–¥", "back_to_time");
}

async function createConfirmationButtons() {
  return new InlineKeyboard()
    .text("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", "confirm_appointment")
    .text("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", "cancel_appointment")
    .row()
    .text("üîô –ù–∞–∑–∞–¥", "back_to_duration");
}

bot.command("start", async (ctx) => {
  const userId = ctx.from.id;
  if (await isAuthorized(userId)) {
    await ctx.reply("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –æ–±—Ä–∞—Ç–Ω–æ! üöó", { reply_markup: mainMenu });
  } else {
    await ctx.reply("–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø—Ä–æ–π–¥–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:", { reply_markup: authKeyboard });
  }
});

bot.hears("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π–∫—É", async (ctx) => {
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", {
    reply_markup: {
      remove_keyboard: true
    }
  });

  const keyboard = await createDateButtons();
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –Ω–∞ –º–æ–π–∫—É:", { reply_markup: keyboard });
});

bot.hears("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", async (ctx) => {
  const user = await getUserInfo(ctx.from.id);
  if (!user) return ctx.reply("‚ùå –ê–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞!", { reply_markup: authKeyboard });

  await ctx.reply(
    `üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n` +
    `üÜî ID: ${user.id}\n` +
    `üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${user.phone}\n` +
    `üìÖ –ó–∞–ø–∏—Å–µ–π: 0`,
    { reply_markup: cabinetMenu }
  );
});

bot.hears("üóë –£–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è", async (ctx) => {
  try {
    console.log("–£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π —Å ID 4937...");
    await deleteAllAppointmentsForToday(4937);
    await deleteAppointmentsForToday(4937);
    await ctx.reply("‚úÖ –í—Å–µ –∑–∞–ø–∏—Å–∏ —Å ID 4937 –Ω–∞ —Å–µ–≥–æ–¥–Ω—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", { reply_markup: cabinetMenu });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π:", error);
    await ctx.reply(`‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π: ${error.message}`, { reply_markup: cabinetMenu });
  }
});


bot.hears("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é", async (ctx) => {
  await ctx.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { reply_markup: mainMenu });
});

bot.callbackQuery(/date_(.+)/, async (ctx) => {
  const date = ctx.match[1];
  ctx.session.appointment.date = date;
  const keyboard = await createTimeButtons(date, 1);
  await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ${date}:`, { reply_markup: keyboard });
});

bot.callbackQuery("open_calendar", async (ctx) => {
  const keyboard = await createCalendarButtons();
  await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏–∑ –∫–∞–ª–µ–Ω–¥–∞—Ä—è:", { reply_markup: keyboard });
});

bot.callbackQuery(/time_(.+)_(.+)/, async (ctx) => {
  const [_, date, time] = ctx.match;
  ctx.session.appointment.time = time;
  const keyboard = await createDurationButtons();
  await ctx.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: ${time}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:`, { reply_markup: keyboard });
});

bot.callbackQuery(/duration_(\d+)/, async (ctx) => {
  const duration = ctx.match[1];
  ctx.session.appointment.duration = duration;
  const { date, time } = ctx.session.appointment;

  const confirmationKeyboard = await createConfirmationButtons();
  await ctx.editMessageText(
    `–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∑–∞–ø–∏—Å—å:\n\n` +
    `üìÖ –î–∞—Ç–∞: ${date}\n` +
    `‚è∞ –í—Ä–µ–º—è: ${time}\n` +
    `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –º–∏–Ω—É—Ç`,
    { reply_markup: confirmationKeyboard }
  );
});

bot.callbackQuery("confirm_appointment", async (ctx) => {
  const { date, time, duration } = ctx.session.appointment;

const reserv = {
  "id": null,
  "date": date,
  "time": {
    "start": time,
    "duration": duration
  },
  "free": false,
  "service": false,
  "person": {
    "id": 4937
  }
}

  try {
    await setReservation(reserv);
    await saveAppointment(ctx.from.id, date, time, duration);
    await ctx.editMessageText(
      `‚úÖ –ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n\n` +
      `üìÖ –î–∞—Ç–∞: ${date}\n` +
      `‚è∞ –í—Ä–µ–º—è: ${time}\n` +
      `‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${duration} –º–∏–Ω—É—Ç`
    );
    ctx.session.appointment = {};
    await ctx.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { reply_markup: mainMenu });
  } catch (error) {
    console.error("–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏:", error);
    await ctx.reply("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏");
  }
});

bot.callbackQuery("cancel_appointment", async (ctx) => {
  ctx.session.appointment = {};
  await ctx.editMessageText("–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞.");
  await ctx.reply("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", { reply_markup: mainMenu });
});

bot.callbackQuery("back_to_dates", async (ctx) => {
  const keyboard = await createDateButtons();
  await ctx.editMessageText("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É:", { reply_markup: keyboard });
});

bot.callbackQuery("back_to_time", async (ctx) => {
  const { date } = ctx.session.appointment;
  const keyboard = await createTimeButtons(date, 1);
  await ctx.editMessageText(`–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è –¥–ª—è ${date}:`, { reply_markup: keyboard });
});

bot.callbackQuery("back_to_duration", async (ctx) => {
  const { date, time } = ctx.session.appointment;
  const keyboard = await createDurationButtons();
  await ctx.editMessageText(`–í—ã –≤—ã–±—Ä–∞–ª–∏ –≤—Ä–µ–º—è: ${time}. –í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å:`, { reply_markup: keyboard });
});

bot.callbackQuery("back_to_main_menu", async (ctx) => {
  await ctx.editMessageText("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.");
  await ctx.reply("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", { reply_markup: mainMenu });
});

bot.on(":contact", async (ctx) => {
  const contact = ctx.message.contact;
  if (contact.user_id !== ctx.from.id) {
    return ctx.reply("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç");
  }

  try {
    await addUser(ctx.from.id, contact.phone_number);
    await ctx.reply("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", { reply_markup: mainMenu });
  } catch (error) {
    await ctx.reply("‚ùå –≠—Ç–æ—Ç –Ω–æ–º–µ—Ä —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω");
  }
});

bot.start();
