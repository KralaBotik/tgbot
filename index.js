require("dotenv").config();
const { Bot, Keyboard, InlineKeyboard } = require("grammy");
const { addUser, isAuthorized, getUserInfo } = require("./database");

const bot = new Bot(process.env.BOT_API_KEY);

const mainMenu = new Keyboard()
  .text("üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –º–æ–π–∫—É")
  .text("üìã –ú–æ–∏ –∑–∞–ø–∏—Å–∏")
  .row()
  .text("üìú –ê—Ä—Ö–∏–≤ –º–æ–µ–∫")
  .text("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç")
  .resized();

const autorKeyboard = new Keyboard()
  .requestContact("üì± –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è")
  .resized()
  .oneTime();

bot.command("start", async (ctx) => {
  const userId = ctx.from.id;

  if (await isAuthorized(userId)) {
    return ctx.reply("‚úÖ –¢—ã —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!", { reply_markup: mainMenu });
  }

  await ctx.reply(
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –∞–≤—Ç–æ–º–æ–π–∫–∏ –ü–∞–ø–∏–ª–æ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑–∏—Ä—É–π—Å—è, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.",
    { reply_markup: autorKeyboard }
  );
});

bot.on(":contact", async (ctx) => {
  const contact = ctx.message.contact;
  const userId = ctx.from.id;

  if (contact.user_id !== userId) {
    return ctx.reply("üö´ –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç!");
  }

  try {
    await addUser(userId, contact.phone_number);
    ctx.reply("‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!", { reply_markup: mainMenu });
  } catch (err) {
    ctx.reply("üö´ –¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.", { reply_markup: mainMenu });
  }
});

bot.hears("üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", async (ctx) => {
  const userId = ctx.from.id;
  const userInfo = await getUserInfo(userId);

  if (!userInfo) {
    return ctx.reply("üö´ –¢—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.", {
      reply_markup: autorKeyboard,
    });
  }

  await ctx.reply(
    `<b>üë§ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç</b>\n\n<b>üÜî ID:</b> ${userInfo.userId}\n<b>üì± –¢–µ–ª–µ—Ñ–æ–Ω:</b> ${userInfo.phone}`,
    { parse_mode: "HTML" }
  );
});

bot.on("message", async (ctx) => {
  await ctx.reply("–Ø –Ω–µ –ø–æ–Ω—è–ª –≤–∞—à –∑–∞–ø—Ä–æ—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã.");
});

bot.start();